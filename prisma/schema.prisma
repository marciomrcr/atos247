// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Chassi {
  Laptop
  Desktop
}

enum Refresh {
  Sim
  Nao
}

enum Share {
  Sim
  Nao
}

enum Analyst {
  Euclides
  Marcio
  Rodrigo
  Vinicius
}

model Migrate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        String
  serie       String   @unique
  chassi      Chassi
  model       String
  refresh     Refresh
  share       Share
  observation String?
  analyst     Analyst
  migrateDate DateTime

  @@map("migrations")
}

type Address {
  cep         String
  logradouro  String
  numero      String
  complemento String
  bairro      String
  cidade      String
}

model Batismo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phone       String
  birthDay    DateTime
  sexo        sexo
  batismo     DateTime
  anjo        String
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String

  cell   Cell   @relation(fields: [cellId], references: [id])
  cellId String @db.ObjectId

  @@map("batismos")
}

type Phone {
  phone1 String
  phone2 String
}

enum sexo {
  Feminino
  Masculino
}

enum Origem {
  Outra_igreja
  Batismo
  Existente
}

model Network {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  active        Boolean @default(true)
  multiplicacao Boolean @default(false)
  redeOrigemId  String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cells Cell[]

  @@map("redes")
}

// model User {
//   id          String  @id @default(auto()) @map("_id") @db.ObjectId
//   name        String?
//   successorId String? @unique @db.ObjectId
//   successor   User?   @relation("BlogOwnerHistory", fields: [successorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   predecessor User?   @relation("BlogOwnerHistory")
// }

model Cell {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  networkId String @db.ObjectId

  multiplicacao  Boolean @default(false)
  celulaMaeId    String? @db.ObjectId
  celulaMae      Cell?   @relation("CellHistoric", fields: [celulaMaeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  celulasGeradas Cell[]  @relation("CellHistoric")
  active         Boolean @default(true)

  network Network @relation(fields: [networkId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Batismo    Batismo[]
  discipulos Discipulo[]

  @@index([name, networkId])
  @@map("celulas")
}

model Cargo {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique

  Discipulo      Discipulo[]
  historicoCargo HistoricoCargo[]

  @@map("cargos")
}

model Discipulo {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String   @unique
  phone String
  birth DateTime

  historicoCargo HistoricoCargo[]
  Cargo          Cargo?           @relation(fields: [cargoId], references: [id])
  cargoId        String?          @db.ObjectId
  cell           Cell             @relation(fields: [cellId], references: [id])
  cellId         String           @db.ObjectId

  @@map("discipulos")
}

model HistoricoCargo {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  cargoId   String    @db.ObjectId
  membroId  String    @db.ObjectId
  startDate DateTime  @default(now())
  endDate   DateTime?

  cargo  Cargo     @relation(fields: [cargoId], references: [id])
  membro Discipulo @relation(fields: [membroId], references: [id])

  @@map("historicoCargos")
}
