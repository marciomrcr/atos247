// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Address {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  personId    String @unique @db.ObjectId
  cep         String
  logradouro  String
  numero      String
  complemento String
  bairro      String
  cidade      String

  person  Person    @relation(fields: [personId], references: [id])
  Batismo Batismo[]
}

model Batismo {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  phone    String
  birthDay DateTime
  batismo  DateTime
  anjo     String

  Address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @db.ObjectId

  cell   Cell   @relation(fields: [cellId], references: [id])
  cellId String @db.ObjectId

  @@map("batismos")
}

model Person {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String      @unique
  phone     Int
  birthDay  DateTime
  origem    Origem      @default(Existente)
  batismo   DateTime?
  Membresia Membresia[]
  Address   Address?

  @@map("pessoas")
}

type Phone {
  phone1 String
  phone2 String
}

enum Origem {
  Outra_igreja
  Batismo
  Existente
}

model Network {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  active        Boolean @default(true)
  multiplicacao Boolean @default(false)
  redeOrigemId  String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cells     Cell[]
  Membresia Membresia[]

  @@map("redes")
}

model Cell {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  networkId String @db.ObjectId

  multiplicacao    Boolean @default(false)
  celulaDeOrigemId String? @db.ObjectId

  active Boolean @default(true)

  network Network @relation(fields: [networkId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Membresia Membresia[]
  Batismo   Batismo[]

  @@index([name, networkId])
  @@map("celulas")
}

model Responsibility {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  membresia Membresia[]

  @@map("Responsibilitys")
}

model Membresia {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  personId         String  @db.ObjectId
  responsibilityId String  @db.ObjectId
  cellId           String? @db.ObjectId
  networkId        String? @db.ObjectId

  person         Person         @relation(fields: [personId], references: [id])
  responsibility Responsibility @relation(fields: [responsibilityId], references: [id])
  cell           Cell?          @relation(fields: [cellId], references: [id])
  network        Network?       @relation(fields: [networkId], references: [id])

  @@index([personId, responsibilityId])
  @@map("membros")
}
